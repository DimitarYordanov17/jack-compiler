<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<varDec>
				<keyword> var </keyword>
				<identifier> PongGame </identifier>
				<identifier> game </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> PongGame </identifier>
					<symbol> . </symbol>
					<identifier> newInstance </identifier>
					<symbol> ( </symbol>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> game </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> PongGame </identifier>
							<symbol> . </symbol>
							<identifier> getInstance </identifier>
							<symbol> ( </symbol>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> run </identifier>
					<symbol> ( </symbol>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
	<symbol> } </symbol>
</class>
